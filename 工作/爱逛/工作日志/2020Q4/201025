1、React 的 useState 的每一次改值都会重新执行函数组件
  分析：React需要重新执行函数组件来获得 state 的闭包，因此 useState 的返回值可以用 const 类型，state 的每一次修改都是一次新的render
  思考：频繁的改值是否会对性能造成影响，能否合并多个修改

2、目前分页逻辑为：重载路由并修改查询参数，并通过 useEffect 监听url的变化，发起查询请求
  监听url的变化不够精准，可以修改为监听 query.page

3、子组件通过JSX内调用函数的方式来确定时，子组件的 useEffect 被延迟执行，没能发起获取请求的参数
  临时的解决方案为将请求移至父组件，子组件仅接受数据
  后续需简化形成demo来验证JSX中调用函数的方式有何不同

4、活动报名中心(其他模块也是) 步骤条返回上级 采用的是为每个步骤增加点击链接，此方式脱离了 router，跳转较慢  // x，此方案行不通，用户可能会在使用过程中跳转到其他页面，因此不能单纯返回上级，需重构该模块使之与路由共存

5、基于 braft-editor 的表单子组件封装：
  校验：富文本的默认值是个对象而不是空字符串，因此不能简单用 required 来校验，需要自定义校验
  onchange的卡顿：富文本组件不需要监听 onchange 来 setState，否则输入时会卡顿

6、商家后台的热更新
  为什么当前没有热更新
  怎么去做热更新
