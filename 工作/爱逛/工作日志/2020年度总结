1、工作内容回顾
  双十二/元旦/年货节 营销活动 福袋模块
    背景/目标
      通过丰富营销玩法, 促进裂变和新用户留存
    达成/收获
      双十二/元旦活动中, 福袋模块累计拉新近四万人次, 新用户次日留存率近10%
      节日类营销活动, 对UI依赖度高, 开发周期短, 对项目开发节奏把控和代码质量要求较高
      开发此类项目, 测试用例、接口开发先行, 优先保证核心功能正常运行, 为后续对接UI预留时间
    不足/改进
      开发此类高定制化的营销活动, 代码的侵入性较强, 复用性不高, 下线代码采取删除的方式, 一来容易遗留, 二来找回麻烦
      后续开发此类代码优先同产品探讨方案, 尽可能扩展现有组件, 将营销活动标准化, 减少定制

  热卖推荐
    背景/目标
      当前 直播间商品的表现形式 是类似导购员逐一展示的方式, 缺少“招牌”式的重点产品, 项目旨在增加特定商品的关注度, 营造抢购氛围, 最终提高成交转化率
    达成/收获
      经过两期优化, 近一个月日均通过‘热卖’打开SKU面板超 2400 次
      在处理线上问题的过程中发现特定路径下, 数据的更新未触发视图渲染问题, 通过深入分析Vanx库的工作原理和宝贝袋数据的更新过程最终定位到问题原因, 在这个过程中对宝贝袋业务的理解和Vanx库的掌握都有提升
    不足/改进
      项目方案分为 ‘轮询’ 的一期和 ‘推送’ 的二期, 一期方案存在明显不足, 应该积极寻求资源、推进, 而不是等到二期再去修改, 不能让 ‘一次做对’ 成为空喊的口号

  有赞接入多客服
    背景/目标
      爱逛app 缺少客服入口, 无法满足用户对于商品的咨询问题, 随着用户量增长影响面正在扩大
      搭建客服平台成本高周期长不适合开发现状, 因此选择接入有赞客服系统, 走共建项目
    达成/收获
      共建项目在跨部门协作中, 双方信息不对等, 往往交流困难, 接入方对业务、流程的不熟悉也容易引入意料之外的bug
      为提高项目质量, 在项目开发前期做了充分的调研, 明确通信流程, 编写详细全面的测试用例, 严格按照灰度流程发布, 最终达成无返工, 无问题反馈
      本项目开发过程中详细记录了 总体通信流程、修改点、联调环境、发布流程、测试用例 及注意事项, 为后续类似的共建项目提供资料参考, 避免重复踩坑
    不足/改进
      在跨部门协作中存在几次无效沟通, 效率较低, 后续在沟通前需要提前梳理疑惑点, 确保双方对问题的理解一致

  活动报名中心
    背景/目标
      原商家参与平台活动 操作路径复杂, 部分商家反馈 找不到活动报名入口
      新活动报名中心 旨在 简化商家报名活动的操作流程, 提高平台活动的商家参与度
    达成/收获
      富文本组件选型, 封装成适配当前项目框架的基础功能组件, 丰富活动介绍的展示形式
      解耦 创建预告、报名活动 两者的交互强依赖关系, 提高用户的操作灵活性, 简化整体操作流程
    不足/改进
      在活动详情数据获取的方案上, 选择了本地缓存而非重新发起http请求, 没有及时同步给其他成员, 给后续功能迭代带来不便
      后续做功能开发尽量保持组内原有习惯, 特殊情况需要及时同步其他成员, 将团队协作纳入方案选择的重要依据

  天网导出工具
    背景/目标
      天网是组内最重要的运维工具之一, 对线上问题的定位排查有着非常重要的作用
      目前天网只提供了简单的查询功能, 不支持统计分析, 其提供导出功能效率低, 体验差, 无法定制
      本工具旨在提供自动化的导出、统计功能, 解放人力, 辅助开发人员归类、预防线上问题
    达成/收获
      本工具经历两版优化, 最终做到了一键导出一周日志, 极大提高了工作效率, 具体表现在
        导出时间大幅下降, 导出一周日志仅需五分钟
        兼容不同格式的日志内容分析, 识别率达99%
        提供统计分析, 自动筛选出报错数TOP20作为重点关注对象
        提供错误原因初步分析, 辅助研发人员初步定位报错原因
      基于使用者反馈, 在第二版的重构中采取以下措施
        采用TS重构, 将核心流程按生命周期拆分至各模块, 代码可读性、可维护性大幅提升
        解决了服务端单次查询总数限制问题, 真正做到了一键导出
        着重优化了用户体验, 提供交互式配置
      通过本项目的开发, 不仅仅收获了一款提高效率的工具, 以及对TS、node、爬虫等方面实践性的经验, 最重要的是提高了我“解决问题”的综合能力
    不足/改进
      第一版工具功能单一, 耦合性高, 在需求和工具定位发生改变的情况下难以迅速跟进
      后续做此类项目, 应该提前做好充分的需求调研, 明确需求痛点, 遵循需求分析、概要设计、详细设计的软件开发标准流程, 做好模块拆分, 为后续的升级维护打下良好的基础

2、亮点
  执行力强, 对既定目标的完成度高, 在天网工具服务端查询限制的问题上反复验证, 尝试多种方案, 最终得以解决
  进度把控合理, 根据项目重要性和紧急程度规划优先级, 主动跟进团队进展, 对临时接入的任务响应快, 基本做到项目无延期
	精益求精, 在细节的处理上永不止步, 在技术的深度上有强烈的求知欲, 对待宝贝袋这类问题需要追根究底, 偶然的概率下可能有着必然的原因。

3、不足
  在团队协作方面仍有成长空间, 比如活动报名中心项目中采用了本地存储方案, 在双十二项目的分支管理上产生了分歧, 后续做方案选型、版本控制、分支管理等方面需要更多考虑团队因素。后续预计做一次git相关的分享, 分析一些常见的指令原理, 以及有助开发的操作, 强迫自己对之前零散的积累做一次沉淀。

4、展望
  1、逐步梳理交易链路, 争取达到的目标是, 大群里咨询的线上问题, 能够在半小时以内给出一个初步的回复, 具体行动:
    (1) 在架构层面熟练掌握数据的流向, 画出数据流图, 一季度暂定 海报分享、直播间数据更新、交易链路
    (2) 搜集出现过的问题和解决方案, 尝试自己去排查, 第一季度的目标是平均一周过3个
    (3) 针对问题2, 搭建 检索平台, 对已知问题归类, 提供检索、统计等功能 
  2、优化PC端开发流程, 减少重复性操作, 具体行动
    (1) 分析现有页面, 做到配置式生成, 通过解析配置文件自动生成部分代码, 减少重复劳作
    (2) 基于组件库, 封装业务组件
    (3) 可视化建站调研 (远期规划)









  个人的规划
    业务上
      逐步梳理交易链路, 争取达到的目标是, 大群里咨询的线上问题, 能够在半小时以内给出一个初步的回复
        具体怎么做
          1、在架构层面熟练掌握数据的流向, 画出数据流图, 暂定的规划有
            海报分享流程
            直播间数据更新流程
            交易链路流程

            关键词: 3月底, 出图

          2、搜集出现过的问题和解决方案, 尝试自己去排查, 第一季度的目标是平均一周过3个

          3、录入到检索平台, 对已知问题归类, 提供检索、统计等功能 (在微信群里反馈问题容易丢, 难以统计复盘)
            调研成熟的解决方案
            现有的 Jira + Confluence 能否满足
            尝试做个简易版本

            关键词: 录入、检索、统计、工具

      PC端的代码
        存在的问题:
          有很多结构相似的简单页面, 通常是 查询表单 + 分页列表 的组合, 开发新页面有很多复制黏贴的重复性操作
          添加一个接口, 从声明到调用, 至少需要修改 调用 + 接口声明 + 路由声明 + c + s 五个文件
        解决方案: 通过代码生成器来提升开发效率, 也就是低代码的方式
        具体怎么做
          1、分析现有页面, 做到配置式生成, 通过解析配置文件自动生成部分代码, 减少重复劳作
          2、基于组件库, 封装业务组件
          3、可视化建站, 提供页面模板和预置组件, 支持自定义排版 (远期规划, 需要结合开发情况, 不一定非要实现)

    技术上
      多看源码, 提升技术的深度, 从 看得懂 转变成 写得出


    心态上
      拥抱变化、正视不足
      多交流, 多分享, 切忌闭门造车 
        一个很典型的例子, 还是天网导出工具, 做这个工具花费了不少时间, 但是如果直接跟有赞的维护人员对接, 哪怕是以项目共建的形式, 可能达成的效果会更好, 再比如平时的开发, 可能会钻一些牛角尖, 我有时候会去抠一些性能上的细节, 但是可能收益还比不上对图片做一次压缩, 今年就定一个小目标, 平均每个季度做一次分享, 目的逼迫自己总结回顾知识点, 同时吸取前辈的经验
      提升协作能力, 转换开发思维、从团队的角度去考虑问题
  
      预告两次分享: Vanx 和 git, 主要是想对之前零零散散总结的知识点做一次沉淀
        Vanx 主要是对之前宝贝袋数据更新问题再做一次复盘, 通过分析源码找出这个问题的根本原因 和 解决方案
        git 主要是分析一些常见的指令原理, 究竟做了什么事, 以及跟开发相关的一些常规操作


  对团队: 
    希望能听到 charles 的分享, 因为之前更多的用 wireshark 和 fidder, 对 mac 上的抓包用的比较少(zanproxy的请求监控大多数情况下可以满足日常的抓包需求)

    希望能听到 用户行为分析 相关的分析

  一些疑问
    爱逛跟有赞的关系, 目前爱逛的产品对有赞的基础库依赖比较大, 未来我们的大方向是不是保持现有的节奏, 依托有赞进行业务层面的开发, 还是会做一些爱逛的开源库


