答辩记录
  振山：工作态度，发现问题，主动推动
  刘彬：分析问题，拆解问题
  康俊：注释
  小明：工作瑕疵容忍度低
  德文：编码规范
  初燃：软实力，总结与分享

自我介绍
  移动端：
    不仅仅是机型的兼容性，移动端和PC端的接口差异
    极致的交互体验
  工程化：提高效率、降低成本，包括但不限于webpack，一切以提效为目的事都可以去做，有机会的话，还想了解打包、发布、测试平台的实践，最好是能自己搭建一遍

阶段总结
  项目总结
    好货商品搜索模块
      这是入职后的第一个项目，也是第一次跟建建合作，建建承担的是导师的职责，包括开发环境搭建，开发流程梳理等等，我之前没有开发过小程序，
      所以这些帮我节省了很多自己摸索的时间，需要感谢建建
    砍价拿专题页
      这是第一次跟彬哥合作，总得来说效果还不错，做完之后彬哥还给我发了数据统计，第一天就有20多万的访问量，上线之后也没有出现什么大问题
      但是也有做的不好的地方，比如在发布的时候就出了问题，这是我第一次自己发小程序，发布前没有打包，并且还误操作引入了三方库导致打包失败
      本来是计划当天发布的，结果搞到快十二点，最后还是彬哥帮我发的，这个事情就让我非常难受，因为我的工作失误给别人带来了麻烦
    商家后台
      活动报名中心
    热卖推荐
      多端开发，承担项目中枢(shu)的角色
        为移动端提供支持
        跟产品探讨方案细节，推荐栏的摆放位置会影响开发成本
        跟UI交流配色、样式是否会影响用户体验
        跟后端反复核对接口，轮询的方案浪费资源，且有悖设计初衷
        虽然这三个意见都没有被采纳，相信专业的人做专业的事，所以没有坚持
        (但上线之后都成为了待优化点，上线第二天产品就提出推荐栏把主播的脸挡住了，并且反反复复移动影响感官
        并且这个轮询的接口在双十一期间调用非常频繁，对服务端造成较大压力，引起了有赞侧的问询)
      在梳理数据流链路的过程中，解决了一些潜在的bug，虽然微小，但是能得到满足，就是当你花一整天去阅读源码，用demo反复验证自己的猜想，
      最终得到肯定，这个过程是愉悦的，因为我一直相信做前端不仅仅是工作，他更是一门艺术，做艺术就是要追求完美。
    商家后台TS改造项目
      改造重构类的项目是吃力不讨好的，但我觉得这是一件很有意义的事情，夸张一点说就是功在当下，立在千秋，主要体现在三个方面
      1、业务的梳理划分，职责更清晰，排查问题、功能变更都可以更快地定位
      2、静态类型检查，降低了潜在的bug风险
      3、参与人员对TS的一次实践，从JS直接迁移会留下很多痕迹，就比如使用any等同于跳过了类型检查，TS的其他特性如何在项目中落地也是值得探索的

  团队建设
    天网导出工具
      天网的价值：最重要的运维工具之一，对监控运行状况，排查问题有着重要的意义
      存在的问题：大量重复报错，导出是全量的txt，体验较差，总得地说，就是需要花费不少人工成本去维护，费时费力

      期望的目标：最初的目标是值班制，定期专人分发任务到责任人，排查报错原因，以达成不断减少报错总量的目的
      目标的背后：值班值的目的是减少人力浪费，汇总去重、查询分发到责任人

      快速出雏形：最初的版本只用了半个小时，证明思路是可行的
      持续地迭代：针对痛点逐步优化，提高查询速度、自动查询责任人、去重导出成excel

      解决了什么：解放了人力，值班人每周只需要花费几分钟导出excel
      还剩下什么：服务端的限制、更好的人机交互，最终达成一键式导出
    
  阶段复盘
    keep: 注重交互体验、对问题追根溯源
    improve: 提高自身的影响力
      两只建的启发：说的多不如做的好
      这是从和健、王建两只建身上得到的启发，他们都属于性格内向但都受到肯定的人
      大家对他们的评价核心就是可靠，得到认可的方式就是做好自己的事，衡量的标准是我的参与是否减轻了其他人的负担
    stop: 减少流程上的失误
    start: 养成写文档的习惯
      这个文档包括项目文档和技术文档
      项目文档主要是规范化，细致化，将项目分解成清晰的流水线
      技术文档主要是技术上的沉淀，目的是将自我的提升转换为团队的提升

收获复盘
  技术
    知其然须知其所以然
      这是来自彬哥的分享，原先我也阅读过vue的源码，也大致看过 mixin、事件、hooks 的实现原理，但是没有想过这些技术的差异，各自有什么优缺点，适合放在什么样的场景

  理念
    技术高于业务 -> 两者相辅相成
      技术的沉淀创新的重要性是大于业务学习，如果只是做业务开发，那么实习生也能做，体现不了自身的价值
      关注各类技术文章，但是缺乏实践机会，难以落地形成产出，方向不明确，导致杂而不精，学习的效率不高
      就像沈老师经常说的，在什么阶段就做什么事
      最好的状态应该是，从项目中来，到项目中去

  流程
    多实践，多反思，多记录
      在前几个月中版本管理、发布流程是我做的不好的地方，出过几次版本管理、发布的事故

  沟通
    多听，多看，多问，有准备地交流
      交流的时候会遇到双方互相没有get到点的情况，比如在技术问题和需求评审的时候
      小程序渲染白屏问题，跟彬哥讨论过两次，
        第一次是失败的讨论，因为我问得是这段代码做什么用，为什么要这么写
        第二次是顺着链路看过了底层源码，并且设计方案验证了猜想之后
      需求评审的时候提前了解原有的业务和实现方案
        参与需求评审的时候，在提问环节往往提不出建设性的意见，评估开发周期也不好把控
        虽然在短周期的开发模式下总体仍然是可控的，但仍然有可能产生方案变更，影响开发效率

未来规划
  短期规划
    天网导出工具
  中期规划
    TS > webpack > node > 源码
  长期规划
    我来爱逛的时候就说过，希望在 框架源码、工程化、node、TS、算法 这些方面下功夫，但是这是一个长期的、循序渐进的过程，应该根据自己和团队的进程来调整优先级


